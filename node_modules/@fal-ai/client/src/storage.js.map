{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../../libs/client/src/storage.ts"],"names":[],"mappings":"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","sourcesContent":["import { getRestApiUrl, RequiredConfig } from \"./config\";\nimport { dispatchRequest } from \"./request\";\nimport { isPlainObject } from \"./utils\";\n\n/**\n * File support for the client. This interface establishes the contract for\n * uploading files to the server and transforming the input to replace file\n * objects with URLs.\n */\nexport interface StorageClient {\n  /**\n   * Upload a file to the server. Returns the URL of the uploaded file.\n   * @param file the file to upload\n   * @param options optional parameters, such as custom file name\n   * @returns the URL of the uploaded file\n   */\n  upload: (file: Blob) => Promise<string>;\n\n  /**\n   * Transform the input to replace file objects with URLs. This is used\n   * to transform the input before sending it to the server and ensures\n   * that the server receives URLs instead of file objects.\n   *\n   * @param input the input to transform.\n   * @returns the transformed input.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transformInput: (input: Record<string, any>) => Promise<Record<string, any>>;\n}\n\ntype InitiateUploadResult = {\n  file_url: string;\n  upload_url: string;\n};\n\ntype InitiateUploadData = {\n  file_name: string;\n  content_type: string | null;\n};\n\n/**\n * Get the file extension from the content type. This is used to generate\n * a file name if the file name is not provided.\n *\n * @param contentType the content type of the file.\n * @returns the file extension or `bin` if the content type is not recognized.\n */\nfunction getExtensionFromContentType(contentType: string): string {\n  const [_, fileType] = contentType.split(\"/\");\n  return fileType.split(/[-;]/)[0] ?? \"bin\";\n}\n\n/**\n * Initiate the upload of a file to the server. This returns the URL to upload\n * the file to and the URL of the file once it is uploaded.\n *\n * @param file the file to upload\n * @returns the URL to upload the file to and the URL of the file once it is uploaded.\n */\nasync function initiateUpload(\n  file: Blob,\n  config: RequiredConfig,\n): Promise<InitiateUploadResult> {\n  const contentType = file.type || \"application/octet-stream\";\n  const filename =\n    file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;\n  return await dispatchRequest<InitiateUploadData, InitiateUploadResult>({\n    method: \"POST\",\n    targetUrl: `${getRestApiUrl()}/storage/upload/initiate`,\n    input: {\n      content_type: contentType,\n      file_name: filename,\n    },\n    config,\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype KeyValuePair = [string, any];\n\ntype StorageClientDependencies = {\n  config: RequiredConfig;\n};\n\nexport function createStorageClient({\n  config,\n}: StorageClientDependencies): StorageClient {\n  const ref: StorageClient = {\n    upload: async (file: Blob) => {\n      const { fetch, responseHandler } = config;\n      const { upload_url: uploadUrl, file_url: url } = await initiateUpload(\n        file,\n        config,\n      );\n      const response = await fetch(uploadUrl, {\n        method: \"PUT\",\n        body: file,\n        headers: {\n          \"Content-Type\": file.type || \"application/octet-stream\",\n        },\n      });\n      await responseHandler(response);\n      return url;\n    },\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    transformInput: async (input: any): Promise<any> => {\n      if (Array.isArray(input)) {\n        return Promise.all(input.map((item) => ref.transformInput(item)));\n      } else if (input instanceof Blob) {\n        return await ref.upload(input);\n      } else if (isPlainObject(input)) {\n        const inputObject = input as Record<string, any>;\n        const promises = Object.entries(inputObject).map(\n          async ([key, value]): Promise<KeyValuePair> => {\n            return [key, await ref.transformInput(value)];\n          },\n        );\n        const results = await Promise.all(promises);\n        return Object.fromEntries(results);\n      }\n      // Return the input as is if it's neither an object nor a file/blob/data URI\n      return input;\n    },\n  };\n  return ref;\n}\n"]}